#include <bits/stdc++.h>
using namespace std;

const int N = 25e2 + 10;
vector<int> v(N);

int dp[N];

// function call: n
// O(n^2)
int func(int i)
{
    int ans = 1;

    if(i == 0) return dp[i] = 1;

    if(dp[i] != -1) return dp[i];

    // in condition, i skip (=) because already length 1 counted.
    for(int j = 0; j < i; ++j)
    {
        if(v[i] > v[j])
        {
            ans = max(ans, func(j) + 1);
        }
    }

    return dp[i] = ans;
}

int main()
{
    memset(dp, -1, sizeof(dp));

    int n;
    cin>>n;

    for(int i=0; i<n; i++)
    {
        cin>>v[i];
    }

    int ct = 0;

    for(int i=0; i<n; i++)
    {
        ct = max(ct, func(i));
    }

    cout<<ct<<endl;

    return 0;
}

// dp er kaj number of call k exponential time theke n time a ana.
